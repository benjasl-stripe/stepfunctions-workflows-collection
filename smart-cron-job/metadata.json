{
    "title": "Smart cron job",
    "description": "Use AWS Step Function to build a smart cron job.",
    "language": "Typescript",
    "implementation": "Pattern",
    "usecase": "Scheduled job",
    "type": "Standard",
    "diagram":"https://github.com/bls20AWS/stepfunctions-workflows-collection/blob/main/smart-cron-job/statemachine/statemachine.png?raw=true",
   
    "videoId": "",
    "level": "100",
    "framework": "CDK",
    "services": {
      "from": "eventbridge",
      "to": "sfn"
    },
    "introBox": {
      "headline": "How it works",
      "text": [
        "A DynamoDB Table is created to hold all your event.",
        "Every day at 00:01 an Event Bridge cron will trigger the Lambda which will query the table to get all the events for that specific day.",
        "For each event scheduled to run that day, an instance of the Step Function will be triggered and will execute the first state which represents a wait until the specific timestamp for the event is reached.",
        "Once the timestamp is reached, the second step is trigered which is another step function. This inner Step Function should be modified to add your own logic."
      ]
    },
    "testing": {
      "headline": "Testing",
      "text": [
        "See the GitHub repo for detailed testing instructions."
      ]
    },
    "cleanup": {
      "headline": "Cleanup",
      "text": [
        "1. Delete the stack: <code>cdk destroy</code>."
      ]
    },
    "deploy": {
      "text": [
        "npm install",
        "cdk deploy"
      ]
    },
    "gitHub": {
      "template": {
        "repoURL": "https://github.com/bls20AWS/stepfunctions-workflows-collection/tree/main/smart-cron-job/",
        "templateDir":"smart-cron-job/",
        "templateFile": "lib/smart-cron-job-stack.ts",
        "ASL": "statemachine/statemachine.asl.json"
      },
      "payloads": [
        {
          "headline": "",
          "payloadURL": ""
        }
      ]
    },
    "resources": {
      "headline": "Additional resources",
      "bullets": [
        {
          "text": "Reducing custom code by using advanced rules in Amazon EventBridge",
          "link": "https://aws.amazon.com/blogs/compute/reducing-custom-code-by-using-advanced-rules-in-amazon-eventbridge/"
        },
        {
          "text": "Use Amazon EventBridge to Build Decoupled, Event-Driven Architectures",
          "link": "https://serverlessland.com/learn/eventbridge"
        }
      ]
    },
    "contributor": "content/contributors/ext-bryson-tyrrell.json"
  }
  